name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types:
      - published
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_ext: tar.gz
            artifact_name: obsyncgit-linux-x86_64.tar.gz
            linker: ""
            ar: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_ext: tar.gz
            artifact_name: obsyncgit-linux-aarch64.tar.gz
            linker: aarch64-linux-gnu-gcc
            ar: aarch64-linux-gnu-ar
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_ext: tar.gz
            artifact_name: obsyncgit-macos-x86_64.tar.gz
            linker: ""
            ar: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_ext: tar.gz
            artifact_name: obsyncgit-macos-arm64.tar.gz
            linker: ""
            ar: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_ext: zip
            artifact_name: obsyncgit-windows-x86_64.zip
            linker: ""
            ar: ""
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_ext: zip
            artifact_name: obsyncgit-windows-arm64.zip
            linker: ""
            ar: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux cross toolchain
        if: runner.os == 'Linux' && contains(matrix.target, 'aarch64-unknown-linux-gnu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.linker }}
          CC_aarch64_unknown_linux_gnu: ${{ matrix.linker }}
          AR_aarch64_unknown_linux_gnu: ${{ matrix.ar }}

      - name: Package binary (unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/obsyncgit dist/obsyncgit
          tar -C dist -czf ${{ matrix.artifact_name }} obsyncgit

      - name: Package binary (windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $dist = Join-Path $PWD "dist"
          New-Item -ItemType Directory -Path $dist -Force | Out-Null
          $binaryPath = Resolve-Path "target\${{ matrix.target }}\release\obsyncgit.exe"
          Copy-Item $binaryPath (Join-Path $dist "obsyncgit.exe") -Force
          Compress-Archive -Path (Join-Path $dist "obsyncgit.exe") -DestinationPath "${{ matrix.artifact_name }}"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: ${{ matrix.artifact_name }}
