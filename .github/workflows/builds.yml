name: Branch Builds

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

concurrency:
  group: branch-build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build ${{ github.ref_name }} binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_prefix: obsyncgit-linux-x86_64
            artifact_ext: tar.gz
          - os: macos-latest
            artifact_prefix: obsyncgit-macos
            artifact_ext: tar.gz
          - os: windows-latest
            artifact_prefix: obsyncgit-windows-x86_64
            artifact_ext: zip
    env:
      BUILD_TYPE: ${{ github.ref_name == 'main' && 'release' || 'dev' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install Linux GUI build dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgtk-3-dev libglib2.0-dev libgirepository1.0-dev libayatana-appindicator3-dev libxdo-dev

      - name: Build release binary
        run: cargo build --release --locked

      - name: Build GUI helper
        run: cargo build --release --locked --bin obsyncgit-gui --features gui

      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT_NAME="${{ matrix.artifact_prefix }}-${BUILD_TYPE}.${{ matrix.artifact_ext }}"
          DIST_DIR="dist"
          mkdir -p "${DIST_DIR}"
          cp target/release/obsyncgit "${DIST_DIR}/obsyncgit"
          if [ -f "target/release/obsyncgit-gui" ]; then
            cp target/release/obsyncgit-gui "${DIST_DIR}/obsyncgit-gui"
          fi
          tar -C "${DIST_DIR}" -czf "${ARTIFACT_NAME}" .
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> "$GITHUB_ENV"
          echo "ARTIFACT_PATH=$(pwd)/${ARTIFACT_NAME}" >> "$GITHUB_ENV"

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $artifactName = "${{ matrix.artifact_prefix }}-$env:BUILD_TYPE.${{ matrix.artifact_ext }}"
          $dist = Join-Path $PWD "dist"
          New-Item -ItemType Directory -Path $dist -Force | Out-Null
          Copy-Item "target\release\obsyncgit.exe" (Join-Path $dist "obsyncgit.exe") -Force
          $guiPath = "target\release\obsyncgit-gui.exe"
          if (Test-Path $guiPath) {
            Copy-Item $guiPath (Join-Path $dist "obsyncgit-gui.exe") -Force
          }
          $archivePath = Join-Path $PWD $artifactName
          Compress-Archive -Path (Join-Path $dist '*') -DestinationPath $archivePath -Force
          Add-Content -Path $env:GITHUB_ENV -Value "ARTIFACT_NAME=$artifactName"
          Add-Content -Path $env:GITHUB_ENV -Value "ARTIFACT_PATH=$archivePath"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error

      - name: Summarize build type
        run: |
          echo "## Build summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- Branch: ${{ github.ref_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Build type: ${BUILD_TYPE}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Artifact: ${{ env.ARTIFACT_NAME }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- OS: ${{ runner.os }}" >> "$GITHUB_STEP_SUMMARY"
